-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity testpr is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    packetIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    packetIn_TVALID : IN STD_LOGIC;
    packetIn_TREADY : OUT STD_LOGIC;
    packetIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    packetIn_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    packetOut_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    packetOut_TVALID : OUT STD_LOGIC;
    packetOut_TREADY : IN STD_LOGIC;
    packetOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    packetOut_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of testpr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "testpr,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.560000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=326,HLS_SYN_LUT=492}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_45 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal packetIn_V_data_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal packetIn_V_data_V_0_vld_in : STD_LOGIC;
    signal packetIn_V_data_V_0_vld_out : STD_LOGIC;
    signal packetIn_V_data_V_0_ack_in : STD_LOGIC;
    signal packetIn_V_data_V_0_ack_out : STD_LOGIC;
    signal packetIn_V_data_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal packetIn_V_data_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal packetIn_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal packetIn_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal packetIn_V_data_V_0_sel : STD_LOGIC;
    signal packetIn_V_data_V_0_load_A : STD_LOGIC;
    signal packetIn_V_data_V_0_load_B : STD_LOGIC;
    signal packetIn_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal packetIn_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal packetIn_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal packetIn_V_last_V_0_vld_in : STD_LOGIC;
    signal packetIn_V_last_V_0_vld_out : STD_LOGIC;
    signal packetIn_V_last_V_0_ack_in : STD_LOGIC;
    signal packetIn_V_last_V_0_ack_out : STD_LOGIC;
    signal packetIn_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal packetIn_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal packetIn_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal packetIn_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal packetIn_V_last_V_0_sel : STD_LOGIC;
    signal packetIn_V_last_V_0_load_A : STD_LOGIC;
    signal packetIn_V_last_V_0_load_B : STD_LOGIC;
    signal packetIn_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal packetIn_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal packetIn_V_keep_V_0_vld_in : STD_LOGIC;
    signal packetIn_V_keep_V_0_ack_out : STD_LOGIC;
    signal packetIn_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal packetOut_V_data_V_1_data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal packetOut_V_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal packetOut_V_data_V_1_vld_in : STD_LOGIC;
    signal packetOut_V_data_V_1_vld_out : STD_LOGIC;
    signal packetOut_V_data_V_1_ack_in : STD_LOGIC;
    signal packetOut_V_data_V_1_ack_out : STD_LOGIC;
    signal packetOut_V_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal packetOut_V_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal packetOut_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal packetOut_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal packetOut_V_data_V_1_sel : STD_LOGIC;
    signal packetOut_V_data_V_1_load_A : STD_LOGIC;
    signal packetOut_V_data_V_1_load_B : STD_LOGIC;
    signal packetOut_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal packetOut_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal packetOut_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal packetOut_V_last_V_1_vld_in : STD_LOGIC;
    signal packetOut_V_last_V_1_vld_out : STD_LOGIC;
    signal packetOut_V_last_V_1_ack_in : STD_LOGIC;
    signal packetOut_V_last_V_1_ack_out : STD_LOGIC;
    signal packetOut_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal packetOut_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal packetOut_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal packetOut_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal packetOut_V_last_V_1_sel : STD_LOGIC;
    signal packetOut_V_last_V_1_load_A : STD_LOGIC;
    signal packetOut_V_last_V_1_load_B : STD_LOGIC;
    signal packetOut_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal packetOut_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal packetOut_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal packetOut_V_keep_V_1_vld_in : STD_LOGIC;
    signal packetOut_V_keep_V_1_vld_out : STD_LOGIC;
    signal packetOut_V_keep_V_1_ack_in : STD_LOGIC;
    signal packetOut_V_keep_V_1_ack_out : STD_LOGIC;
    signal packetOut_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal packetOut_V_keep_V_1_sel : STD_LOGIC;
    signal packetOut_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal packetIn_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal packetOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_last_V_reg_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal currPacketOut_data_V_fu_82_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_last_V_3_reg_111 : STD_LOGIC_VECTOR (0 downto 0);
    signal currPacketOut_data_V_1_fu_93_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_p_s_phi_fu_67_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_reg_64 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component testpr_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    testpr_AXILiteS_s_axi_U : component testpr_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    packetIn_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetIn_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((packetIn_V_data_V_0_ack_out = ap_const_logic_1) and (packetIn_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        packetIn_V_data_V_0_sel_rd <= not(packetIn_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    packetIn_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetIn_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((packetIn_V_data_V_0_ack_in = ap_const_logic_1) and (packetIn_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        packetIn_V_data_V_0_sel_wr <= not(packetIn_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    packetIn_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetIn_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((packetIn_V_data_V_0_state = ap_const_lv2_2) and (packetIn_V_data_V_0_vld_in = ap_const_logic_0)) or ((packetIn_V_data_V_0_state = ap_const_lv2_3) and (packetIn_V_data_V_0_vld_in = ap_const_logic_0) and (packetIn_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    packetIn_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((packetIn_V_data_V_0_state = ap_const_lv2_1) and (packetIn_V_data_V_0_ack_out = ap_const_logic_0)) or ((packetIn_V_data_V_0_state = ap_const_lv2_3) and (packetIn_V_data_V_0_ack_out = ap_const_logic_0) and (packetIn_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    packetIn_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((packetIn_V_data_V_0_vld_in = ap_const_logic_0) and (packetIn_V_data_V_0_ack_out = ap_const_logic_1))) and not(((packetIn_V_data_V_0_ack_out = ap_const_logic_0) and (packetIn_V_data_V_0_vld_in = ap_const_logic_1))) and (packetIn_V_data_V_0_state = ap_const_lv2_3)) or ((packetIn_V_data_V_0_state = ap_const_lv2_1) and (packetIn_V_data_V_0_ack_out = ap_const_logic_1)) or ((packetIn_V_data_V_0_state = ap_const_lv2_2) and (packetIn_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    packetIn_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    packetIn_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    packetIn_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetIn_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((packetIn_V_keep_V_0_state = ap_const_lv2_2) and (packetIn_V_keep_V_0_vld_in = ap_const_logic_0)) or ((packetIn_V_keep_V_0_state = ap_const_lv2_3) and (packetIn_V_keep_V_0_vld_in = ap_const_logic_0) and (packetIn_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    packetIn_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((packetIn_V_keep_V_0_state = ap_const_lv2_1) and (packetIn_V_keep_V_0_ack_out = ap_const_logic_0)) or ((packetIn_V_keep_V_0_state = ap_const_lv2_3) and (packetIn_V_keep_V_0_ack_out = ap_const_logic_0) and (packetIn_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    packetIn_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((packetIn_V_keep_V_0_vld_in = ap_const_logic_0) and (packetIn_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((packetIn_V_keep_V_0_ack_out = ap_const_logic_0) and (packetIn_V_keep_V_0_vld_in = ap_const_logic_1))) and (packetIn_V_keep_V_0_state = ap_const_lv2_3)) or ((packetIn_V_keep_V_0_state = ap_const_lv2_1) and (packetIn_V_keep_V_0_ack_out = ap_const_logic_1)) or ((packetIn_V_keep_V_0_state = ap_const_lv2_2) and (packetIn_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    packetIn_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    packetIn_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    packetIn_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetIn_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((packetIn_V_last_V_0_ack_out = ap_const_logic_1) and (packetIn_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        packetIn_V_last_V_0_sel_rd <= not(packetIn_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    packetIn_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetIn_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((packetIn_V_last_V_0_vld_in = ap_const_logic_1) and (packetIn_V_last_V_0_ack_in = ap_const_logic_1))) then 
                                        packetIn_V_last_V_0_sel_wr <= not(packetIn_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    packetIn_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetIn_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((packetIn_V_last_V_0_state = ap_const_lv2_2) and (packetIn_V_last_V_0_vld_in = ap_const_logic_0)) or ((packetIn_V_last_V_0_state = ap_const_lv2_3) and (packetIn_V_last_V_0_vld_in = ap_const_logic_0) and (packetIn_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    packetIn_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((packetIn_V_last_V_0_state = ap_const_lv2_1) and (packetIn_V_last_V_0_ack_out = ap_const_logic_0)) or ((packetIn_V_last_V_0_state = ap_const_lv2_3) and (packetIn_V_last_V_0_ack_out = ap_const_logic_0) and (packetIn_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    packetIn_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((packetIn_V_last_V_0_vld_in = ap_const_logic_0) and (packetIn_V_last_V_0_ack_out = ap_const_logic_1))) and not(((packetIn_V_last_V_0_ack_out = ap_const_logic_0) and (packetIn_V_last_V_0_vld_in = ap_const_logic_1))) and (packetIn_V_last_V_0_state = ap_const_lv2_3)) or ((packetIn_V_last_V_0_state = ap_const_lv2_1) and (packetIn_V_last_V_0_ack_out = ap_const_logic_1)) or ((packetIn_V_last_V_0_state = ap_const_lv2_2) and (packetIn_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    packetIn_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    packetIn_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    packetOut_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetOut_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((packetOut_V_data_V_1_ack_out = ap_const_logic_1) and (packetOut_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        packetOut_V_data_V_1_sel_rd <= not(packetOut_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    packetOut_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetOut_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((packetOut_V_data_V_1_ack_in = ap_const_logic_1) and (packetOut_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        packetOut_V_data_V_1_sel_wr <= not(packetOut_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    packetOut_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetOut_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((packetOut_V_data_V_1_state = ap_const_lv2_2) and (packetOut_V_data_V_1_vld_in = ap_const_logic_0)) or ((packetOut_V_data_V_1_state = ap_const_lv2_3) and (packetOut_V_data_V_1_vld_in = ap_const_logic_0) and (packetOut_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    packetOut_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((packetOut_V_data_V_1_state = ap_const_lv2_1) and (packetOut_V_data_V_1_ack_out = ap_const_logic_0)) or ((packetOut_V_data_V_1_state = ap_const_lv2_3) and (packetOut_V_data_V_1_ack_out = ap_const_logic_0) and (packetOut_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    packetOut_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((packetOut_V_data_V_1_vld_in = ap_const_logic_0) and (packetOut_V_data_V_1_ack_out = ap_const_logic_1))) and not(((packetOut_V_data_V_1_ack_out = ap_const_logic_0) and (packetOut_V_data_V_1_vld_in = ap_const_logic_1))) and (packetOut_V_data_V_1_state = ap_const_lv2_3)) or ((packetOut_V_data_V_1_state = ap_const_lv2_1) and (packetOut_V_data_V_1_ack_out = ap_const_logic_1)) or ((packetOut_V_data_V_1_state = ap_const_lv2_2) and (packetOut_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    packetOut_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    packetOut_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    packetOut_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetOut_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((packetOut_V_keep_V_1_ack_out = ap_const_logic_1) and (packetOut_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        packetOut_V_keep_V_1_sel_rd <= not(packetOut_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    packetOut_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetOut_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((packetOut_V_keep_V_1_state = ap_const_lv2_2) and (packetOut_V_keep_V_1_vld_in = ap_const_logic_0)) or ((packetOut_V_keep_V_1_state = ap_const_lv2_3) and (packetOut_V_keep_V_1_vld_in = ap_const_logic_0) and (packetOut_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    packetOut_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((packetOut_V_keep_V_1_state = ap_const_lv2_1) and (packetOut_V_keep_V_1_ack_out = ap_const_logic_0)) or ((packetOut_V_keep_V_1_state = ap_const_lv2_3) and (packetOut_V_keep_V_1_ack_out = ap_const_logic_0) and (packetOut_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    packetOut_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((packetOut_V_keep_V_1_vld_in = ap_const_logic_0) and (packetOut_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((packetOut_V_keep_V_1_ack_out = ap_const_logic_0) and (packetOut_V_keep_V_1_vld_in = ap_const_logic_1))) and (packetOut_V_keep_V_1_state = ap_const_lv2_3)) or ((packetOut_V_keep_V_1_state = ap_const_lv2_1) and (packetOut_V_keep_V_1_ack_out = ap_const_logic_1)) or ((packetOut_V_keep_V_1_state = ap_const_lv2_2) and (packetOut_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    packetOut_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    packetOut_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    packetOut_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetOut_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((packetOut_V_last_V_1_ack_out = ap_const_logic_1) and (packetOut_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        packetOut_V_last_V_1_sel_rd <= not(packetOut_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    packetOut_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetOut_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((packetOut_V_last_V_1_ack_in = ap_const_logic_1) and (packetOut_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        packetOut_V_last_V_1_sel_wr <= not(packetOut_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    packetOut_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                packetOut_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((packetOut_V_last_V_1_state = ap_const_lv2_2) and (packetOut_V_last_V_1_vld_in = ap_const_logic_0)) or ((packetOut_V_last_V_1_state = ap_const_lv2_3) and (packetOut_V_last_V_1_vld_in = ap_const_logic_0) and (packetOut_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    packetOut_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((packetOut_V_last_V_1_state = ap_const_lv2_1) and (packetOut_V_last_V_1_ack_out = ap_const_logic_0)) or ((packetOut_V_last_V_1_state = ap_const_lv2_3) and (packetOut_V_last_V_1_ack_out = ap_const_logic_0) and (packetOut_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    packetOut_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((packetOut_V_last_V_1_vld_in = ap_const_logic_0) and (packetOut_V_last_V_1_ack_out = ap_const_logic_1))) and not(((packetOut_V_last_V_1_ack_out = ap_const_logic_0) and (packetOut_V_last_V_1_vld_in = ap_const_logic_1))) and (packetOut_V_last_V_1_state = ap_const_lv2_3)) or ((packetOut_V_last_V_1_state = ap_const_lv2_1) and (packetOut_V_last_V_1_ack_out = ap_const_logic_1)) or ((packetOut_V_last_V_1_state = ap_const_lv2_2) and (packetOut_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    packetOut_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    packetOut_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_s_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packetOut_V_data_V_1_ack_in = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    p_s_reg_64 <= tmp_last_V_3_reg_111;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    p_s_reg_64 <= tmp_last_V_reg_100;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packetIn_V_data_V_0_load_A = ap_const_logic_1)) then
                packetIn_V_data_V_0_payload_A <= packetIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packetIn_V_data_V_0_load_B = ap_const_logic_1)) then
                packetIn_V_data_V_0_payload_B <= packetIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packetIn_V_last_V_0_load_A = ap_const_logic_1)) then
                packetIn_V_last_V_0_payload_A <= packetIn_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packetIn_V_last_V_0_load_B = ap_const_logic_1)) then
                packetIn_V_last_V_0_payload_B <= packetIn_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packetOut_V_data_V_1_load_A = ap_const_logic_1)) then
                packetOut_V_data_V_1_payload_A <= packetOut_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packetOut_V_data_V_1_load_B = ap_const_logic_1)) then
                packetOut_V_data_V_1_payload_B <= packetOut_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packetOut_V_last_V_1_load_A = ap_const_logic_1)) then
                packetOut_V_last_V_1_payload_A <= packetIn_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((packetOut_V_last_V_1_load_B = ap_const_logic_1)) then
                packetOut_V_last_V_1_payload_B <= packetIn_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_last_V_3_reg_111 <= packetIn_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_last_V_reg_100 <= packetIn_V_last_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, packetIn_V_data_V_0_vld_out, packetOut_V_data_V_1_ack_in, packetOut_V_last_V_1_ack_in, packetOut_V_keep_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_phi_mux_p_s_phi_fu_67_p4, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((packetOut_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((packetOut_V_keep_V_1_ack_in = ap_const_logic_0) or (packetOut_V_last_V_1_ack_in = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_phi_mux_p_s_phi_fu_67_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((packetOut_V_keep_V_1_ack_in = ap_const_logic_0) or (packetOut_V_last_V_1_ack_in = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_phi_mux_p_s_phi_fu_67_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((packetOut_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state4_assign_proc : process(packetOut_V_data_V_1_ack_in, packetOut_V_last_V_1_ack_in, packetOut_V_keep_V_1_ack_in)
    begin
                ap_block_state4 <= ((packetOut_V_keep_V_1_ack_in = ap_const_logic_0) or (packetOut_V_last_V_1_ack_in = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(packetOut_V_data_V_1_ack_in, packetOut_V_last_V_1_ack_in, packetOut_V_keep_V_1_ack_in, ap_phi_mux_p_s_phi_fu_67_p4, ap_CS_fsm_state4)
    begin
        if ((not(((packetOut_V_keep_V_1_ack_in = ap_const_logic_0) or (packetOut_V_last_V_1_ack_in = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_phi_mux_p_s_phi_fu_67_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_p_s_phi_fu_67_p4 <= p_s_reg_64;

    ap_ready_assign_proc : process(packetOut_V_data_V_1_ack_in, packetOut_V_last_V_1_ack_in, packetOut_V_keep_V_1_ack_in, ap_phi_mux_p_s_phi_fu_67_p4, ap_CS_fsm_state4)
    begin
        if ((not(((packetOut_V_keep_V_1_ack_in = ap_const_logic_0) or (packetOut_V_last_V_1_ack_in = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_phi_mux_p_s_phi_fu_67_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    currPacketOut_data_V_1_fu_93_p2 <= std_logic_vector(unsigned(packetIn_V_data_V_0_data_out) + unsigned(ap_const_lv64_45));
    currPacketOut_data_V_fu_82_p2 <= std_logic_vector(unsigned(packetIn_V_data_V_0_data_out) + unsigned(ap_const_lv64_45));

    packetIn_TDATA_blk_n_assign_proc : process(packetIn_V_data_V_0_state, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            packetIn_TDATA_blk_n <= packetIn_V_data_V_0_state(0);
        else 
            packetIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    packetIn_TREADY <= packetIn_V_keep_V_0_state(1);
    packetIn_V_data_V_0_ack_in <= packetIn_V_data_V_0_state(1);

    packetIn_V_data_V_0_ack_out_assign_proc : process(packetIn_V_data_V_0_vld_out, packetOut_V_data_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            packetIn_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            packetIn_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    packetIn_V_data_V_0_data_out_assign_proc : process(packetIn_V_data_V_0_payload_A, packetIn_V_data_V_0_payload_B, packetIn_V_data_V_0_sel)
    begin
        if ((packetIn_V_data_V_0_sel = ap_const_logic_1)) then 
            packetIn_V_data_V_0_data_out <= packetIn_V_data_V_0_payload_B;
        else 
            packetIn_V_data_V_0_data_out <= packetIn_V_data_V_0_payload_A;
        end if; 
    end process;

    packetIn_V_data_V_0_load_A <= (packetIn_V_data_V_0_state_cmp_full and not(packetIn_V_data_V_0_sel_wr));
    packetIn_V_data_V_0_load_B <= (packetIn_V_data_V_0_state_cmp_full and packetIn_V_data_V_0_sel_wr);
    packetIn_V_data_V_0_sel <= packetIn_V_data_V_0_sel_rd;
    packetIn_V_data_V_0_state_cmp_full <= '0' when (packetIn_V_data_V_0_state = ap_const_lv2_1) else '1';
    packetIn_V_data_V_0_vld_in <= packetIn_TVALID;
    packetIn_V_data_V_0_vld_out <= packetIn_V_data_V_0_state(0);

    packetIn_V_keep_V_0_ack_out_assign_proc : process(packetIn_V_data_V_0_vld_out, packetOut_V_data_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            packetIn_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            packetIn_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    packetIn_V_keep_V_0_vld_in <= packetIn_TVALID;
    packetIn_V_last_V_0_ack_in <= packetIn_V_last_V_0_state(1);

    packetIn_V_last_V_0_ack_out_assign_proc : process(packetIn_V_data_V_0_vld_out, packetOut_V_data_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            packetIn_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            packetIn_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    packetIn_V_last_V_0_data_out_assign_proc : process(packetIn_V_last_V_0_payload_A, packetIn_V_last_V_0_payload_B, packetIn_V_last_V_0_sel)
    begin
        if ((packetIn_V_last_V_0_sel = ap_const_logic_1)) then 
            packetIn_V_last_V_0_data_out <= packetIn_V_last_V_0_payload_B;
        else 
            packetIn_V_last_V_0_data_out <= packetIn_V_last_V_0_payload_A;
        end if; 
    end process;

    packetIn_V_last_V_0_load_A <= (packetIn_V_last_V_0_state_cmp_full and not(packetIn_V_last_V_0_sel_wr));
    packetIn_V_last_V_0_load_B <= (packetIn_V_last_V_0_state_cmp_full and packetIn_V_last_V_0_sel_wr);
    packetIn_V_last_V_0_sel <= packetIn_V_last_V_0_sel_rd;
    packetIn_V_last_V_0_state_cmp_full <= '0' when (packetIn_V_last_V_0_state = ap_const_lv2_1) else '1';
    packetIn_V_last_V_0_vld_in <= packetIn_TVALID;
    packetIn_V_last_V_0_vld_out <= packetIn_V_last_V_0_state(0);
    packetOut_TDATA <= packetOut_V_data_V_1_data_out;

    packetOut_TDATA_blk_n_assign_proc : process(packetOut_V_data_V_1_state, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            packetOut_TDATA_blk_n <= packetOut_V_data_V_1_state(1);
        else 
            packetOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    packetOut_TKEEP <= packetOut_V_keep_V_1_data_out;
    packetOut_TLAST <= packetOut_V_last_V_1_data_out;
    packetOut_TVALID <= packetOut_V_keep_V_1_state(0);
    packetOut_V_data_V_1_ack_in <= packetOut_V_data_V_1_state(1);
    packetOut_V_data_V_1_ack_out <= packetOut_TREADY;

    packetOut_V_data_V_1_data_in_assign_proc : process(packetIn_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state5, currPacketOut_data_V_fu_82_p2, currPacketOut_data_V_1_fu_93_p2)
    begin
        if ((packetIn_V_data_V_0_vld_out = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                packetOut_V_data_V_1_data_in <= currPacketOut_data_V_1_fu_93_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                packetOut_V_data_V_1_data_in <= currPacketOut_data_V_fu_82_p2;
            else 
                packetOut_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            packetOut_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    packetOut_V_data_V_1_data_out_assign_proc : process(packetOut_V_data_V_1_payload_A, packetOut_V_data_V_1_payload_B, packetOut_V_data_V_1_sel)
    begin
        if ((packetOut_V_data_V_1_sel = ap_const_logic_1)) then 
            packetOut_V_data_V_1_data_out <= packetOut_V_data_V_1_payload_B;
        else 
            packetOut_V_data_V_1_data_out <= packetOut_V_data_V_1_payload_A;
        end if; 
    end process;

    packetOut_V_data_V_1_load_A <= (packetOut_V_data_V_1_state_cmp_full and not(packetOut_V_data_V_1_sel_wr));
    packetOut_V_data_V_1_load_B <= (packetOut_V_data_V_1_state_cmp_full and packetOut_V_data_V_1_sel_wr);
    packetOut_V_data_V_1_sel <= packetOut_V_data_V_1_sel_rd;
    packetOut_V_data_V_1_state_cmp_full <= '0' when (packetOut_V_data_V_1_state = ap_const_lv2_1) else '1';

    packetOut_V_data_V_1_vld_in_assign_proc : process(packetIn_V_data_V_0_vld_out, packetOut_V_data_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            packetOut_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            packetOut_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    packetOut_V_data_V_1_vld_out <= packetOut_V_data_V_1_state(0);
    packetOut_V_keep_V_1_ack_in <= packetOut_V_keep_V_1_state(1);
    packetOut_V_keep_V_1_ack_out <= packetOut_TREADY;
    packetOut_V_keep_V_1_data_out <= ap_const_lv8_FF;
    packetOut_V_keep_V_1_sel <= packetOut_V_keep_V_1_sel_rd;

    packetOut_V_keep_V_1_vld_in_assign_proc : process(packetIn_V_data_V_0_vld_out, packetOut_V_data_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            packetOut_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            packetOut_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    packetOut_V_keep_V_1_vld_out <= packetOut_V_keep_V_1_state(0);
    packetOut_V_last_V_1_ack_in <= packetOut_V_last_V_1_state(1);
    packetOut_V_last_V_1_ack_out <= packetOut_TREADY;

    packetOut_V_last_V_1_data_out_assign_proc : process(packetOut_V_last_V_1_payload_A, packetOut_V_last_V_1_payload_B, packetOut_V_last_V_1_sel)
    begin
        if ((packetOut_V_last_V_1_sel = ap_const_logic_1)) then 
            packetOut_V_last_V_1_data_out <= packetOut_V_last_V_1_payload_B;
        else 
            packetOut_V_last_V_1_data_out <= packetOut_V_last_V_1_payload_A;
        end if; 
    end process;

    packetOut_V_last_V_1_load_A <= (packetOut_V_last_V_1_state_cmp_full and not(packetOut_V_last_V_1_sel_wr));
    packetOut_V_last_V_1_load_B <= (packetOut_V_last_V_1_state_cmp_full and packetOut_V_last_V_1_sel_wr);
    packetOut_V_last_V_1_sel <= packetOut_V_last_V_1_sel_rd;
    packetOut_V_last_V_1_state_cmp_full <= '0' when (packetOut_V_last_V_1_state = ap_const_lv2_1) else '1';

    packetOut_V_last_V_1_vld_in_assign_proc : process(packetIn_V_data_V_0_vld_out, packetOut_V_data_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((packetIn_V_data_V_0_vld_out = ap_const_logic_0) or (packetOut_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            packetOut_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            packetOut_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    packetOut_V_last_V_1_vld_out <= packetOut_V_last_V_1_state(0);
end behav;
